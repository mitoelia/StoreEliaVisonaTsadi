<html xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp" xmlns:ddue="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:msxsl="urn:schemas-microsoft-com:xslt"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><META NAME="save" CONTENT="history" /><title>Esempio di memorizzazione nella cache dei dati dei set di risultati</title><meta name="Language" content="it-it" /><meta name="System.Keywords" content="esempio di memorizzazione nella cache dei dati dei set di risultati" /><meta name="Microsoft.Help.Id" content="13a95ebb-996c-4713-a1bd-5834fe22a334" /><meta name="Description" content="Con questa applicazione di esempio Microsoft JDBC Driver per SQL Server viene illustrato come recuperare un set di dati di grandi dimensioni da un database e quindi controllare il numero di righe di dati memorizzate nella cache del client utilizzando il me" /><meta name="Microsoft.Help.ContentType" content="Samples" /><link rel="stylesheet" type="text/css" href="../local/Classic.css" /><script type="text/javascript" src="../scripts/EventUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/SplitScreen.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/Dropdown.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_manifold.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/script_feedBack.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CheckboxMenu.js">&amp;nbsp;</script><script type="text/javascript" src="../scripts/CommonUtilities.js">&amp;nbsp;</script><script type="text/javascript" src="../local/script_main.js">&amp;nbsp;</script></head><body><div id="header"><table id="bottomTable" cellpadding="0" cellspacing="0"><tr><td align="left"><span id="headerBold">Esempio di memorizzazione nella cache dei dati dei set di risultati</span></td></tr></table><table id="gradientTable"><tr><td class="nsrBottom" background="../icons/gradient.gif" /></tr></table></div><div id="mainSection"><div id="mainBody"><div class="introduction"><p>Con questa applicazione di esempio Microsoft JDBC Driver per SQL Server viene illustrato come recuperare un set di dati di grandi dimensioni da un database e quindi controllare il numero di righe di dati memorizzate nella cache del client utilizzando il metodo <a href="233bf4f8-4758-42d0-a80b-33e34fa78027.htm">setFetchSize</a> dell'oggetto <a href="eaffcff1-286c-459f-83da-3150778480c9.htm">SQLServerResultSet</a>.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>La limitazione del numero di righe inserite nella cache del client è un'operazione diversa dalla limitazione del numero totale di righe contenute in un set di risultati. Per controllare il numero totale di righe contenute in un set di risultati, utilizzare il metodo <a href="cccc0667-589b-4655-8ea8-14ae8b2eb9dc.htm">setMaxRows</a> dell'oggetto <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a>, ereditato dagli oggetti <a href="a8481c06-fbba-432b-8c69-4f4619c20ad4.htm">SQLServerPreparedStatement</a> e <a href="30710a63-c05d-47d9-9cf9-c087a1c76373.htm">SQLServerCallableStatement</a>.</p></div><p>Per impostare un limite al numero di righe inserite nella cache del client, è necessario innanzitutto utilizzare un cursore lato server quando si crea uno degli oggetti <b>Statement</b> specificando esplicitamente il tipo di cursore da utilizzare durante la creazione dell'oggetto <b>Statement</b>. Ad esempio, nel driver JDBC è disponibile il tipo di cursore TYPE_SS_SERVER_CURSOR_FORWARD_ONLY, ovvero un cursore lato server di sola lettura, fast forward only, da utilizzare con i database di SQL Server.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Un'alternativa all'utilizzo del tipo di cursore specifico per SQL Server è l'utilizzo della proprietà della stringa di connessione selectMethod, impostandone il valore su "cursor". Per ulteriori informazioni sui tipi di cursore supportati dal driver JDBC, vedere <span sdata="link"><a href="4f4d3db7-4f76-450d-ab63-141237a4f034.htm">Informazioni sui tipi di cursore</a></span>.</p></div><p>Una volta eseguita la query contenuta nell'oggetto <b>Statement</b> e una volta restituiti i dati al client come set di risultati, è possibile eseguire una chiamata al metodo <b>setFetchSize</b> per controllare la quantità di dati recuperati contemporaneamente dal database. Ad esempio, se si dispone di una tabella che contiene 100 righe di dati e si imposta su 10 la dimensione del recupero, verranno inserite nella cache del client solo 10 righe di dati in qualsiasi momento. In questo modo verrà ridotta la velocità di elaborazione dei dati, ma si otterrà il vantaggio di utilizzare una quantità inferiore di memoria nel client, il che può risultare particolarmente utile quando si elaborano grandi quantità di dati.</p><p>Il file di codice per questo esempio è cacheRS.java ed è disponibile nel seguente percorso:</p><p>&lt;<i>directory di installazione</i>&gt;\sqljdbc_&lt;<i>versione</i>&gt;\&lt;<i>lingua</i>&gt;\help\samples\resultsets</p></div><h1 class="heading">Requisiti</h1><div id="requirementsTitleSection" class="section" name="collapseableSection" style=""><p>Per eseguire questa applicazione di esempio, è necessario impostare il classpath per includere il file sqljdbc.jar o sqljdbc4.jar. Se nel classpath manca una voce per il file sqljdbc.jar o sqljdbc4.jar, nell'applicazione di esempio verrà generata un'eccezione comune di classe non trovata. Sarà inoltre necessario accedere al database di esempio AdventureWorks di SQL Server 2005. Per ulteriori informazioni sull'impostazione del classpath, vedere <span sdata="link"><a href="6faaf05b-8b70-4ed2-9b44-eee5897f1cd0.htm">Utilizzo del driver JDBC</a></span>.</p><div style="margin: .5em 1.5em .5em 1.5em"><b></b><p>Con Microsoft JDBC Driver per SQL Server vengono forniti i file di libreria di classi sqljdbc.jar e sqljdbc4.jar da utilizzare a seconda delle impostazioni Java Runtime Environment (JRE) preferite. Per ulteriori informazioni sul file JAR da scegliere, vedere <span sdata="link"><a href="447792bb-f39b-49b4-9fd0-1ef4154c74ab.htm">Requisiti di sistema per il driver JDBC</a></span>.</p></div></div><h1 class="heading">Esempio</h1><div id="exampleSection" class="section" name="collapseableSection" style=""><p>Nell'esempio seguente, mediante il codice di esempio viene eseguita una connessione al database di esempio AdventureWorks. Viene quindi utilizzata un'istruzione SQL con l'oggetto <a href="ec24963c-8b51-4838-91e9-1fbfa2347451.htm">SQLServerStatement</a>, viene specificato il tipo di cursore lato server, quindi viene eseguita l'istruzione SQL e i dati restituiti vengono collocati in un oggetto <b>SQLServerResultSet</b>.</p><p>Il codice di esempio esegue quindi una chiamata al metodo <b>timerTest</b> personalizzato, passando come argomenti la dimensione di recupero da utilizzare e il set di risultati. Il metodo <b>timerTest</b> imposta quindi la dimensione di recupero del set di risultati utilizzando il metodo <b>setFetchSize</b>, imposta l'ora di inizio del test e scorre il set di risultati con un ciclo <span class="code">While</span>. Non appena terminato il ciclo <span class="code">While</span>, tramite il codice viene impostata l'ora di arresto del test, quindi viene visualizzato il risultato del test con le dimensioni di recupero, il numero di righe elaborate e il tempo impiegato per l'esecuzione del test.</p><div class="sampleCode"><span codeLanguage="other"><pre>import java.sql.*;
import com.microsoft.sqlserver.jdbc.SQLServerResultSet;

public class cacheRS {

   public static void main(String[] args) {

      // Create a variable for the connection string.
      String connectionUrl = "jdbc:sqlserver://localhost:1433;" +
            "databaseName=AdventureWorks;integratedSecurity=true;";

      // Declare the JDBC objects.
      Connection con = null;
      Statement stmt = null;
      ResultSet rs = null;

      try {

         // Establish the connection.
         Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
         con = DriverManager.getConnection(connectionUrl);

         // Create and execute an SQL statement that returns a large
         // set of data and then display it.
         String SQL = "SELECT * FROM Sales.SalesOrderDetail;";
         stmt = con.createStatement(SQLServerResultSet.TYPE_SS_SERVER_CURSOR_FORWARD_ONLY, +
               SQLServerResultSet.CONCUR_READ_ONLY);

         // Perform a fetch for every row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(1, rs);
         rs.close();

         // Perform a fetch for every tenth row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(10, rs);
         rs.close();

         // Perform a fetch for every 100th row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(100, rs);
         rs.close();

         // Perform a fetch for every 1000th row in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(1000, rs);
         rs.close();

         // Perform a fetch for every 128th row (the default) in the result set.
         rs = stmt.executeQuery(SQL);
         timerTest(0, rs);
         rs.close();
      }

      // Handle any errors that may have occurred.
      catch (Exception e) {
         e.printStackTrace();
      }

      finally {
         if (rs != null) try { rs.close(); } catch(Exception e) {}
         if (stmt != null) try { stmt.close(); } catch(Exception e) {}
         if (con != null) try { con.close(); } catch(Exception e) {}
      }
   }

   private static void timerTest(int fetchSize, ResultSet rs) {
      try {

         // Declare the variables for tracking the row count and elapsed time.
         int rowCount = 0;
         long startTime = 0;
         long stopTime = 0;
         long runTime = 0;

         // Set the fetch size then iterate through the result set to
         // cache the data locally.
         rs.setFetchSize(fetchSize);
         startTime = System.currentTimeMillis();
         while (rs.next()) {
            rowCount++;
         }
         stopTime = System.currentTimeMillis();
         runTime = stopTime - startTime;

         // Display the results of the timer test.
         System.out.println("FETCH SIZE: " + rs.getFetchSize());
         System.out.println("ROWS PROCESSED: " + rowCount);
         System.out.println("TIME TO EXECUTE: " + runTime);
         System.out.println();

      } catch (Exception e) {
         e.printStackTrace();
      }
   }
}</pre></span></div></div><span id="seeAlsoSpan"><h1 class="heading">Vedere anche</h1></span><div id="seeAlsoSection" class="section" name="collapseableSection" style=""><div class="seeAlsoStyle"><span sdata="link"><a href="4fc4b1c6-3075-4ad7-9244-865d9ede7ae6.htm">Utilizzo dei set di risultati</a></span></div></div></div><div id="footer" class="section"><span id="feedbackarea">Inviare <a href="javascript:SubmitFeedback('DevDocs@Microsoft.com','','','','8.0.12060.10000','%0\dThank%20you%20for%20your%20feedback.%20The%20developer%20writing%20teams%20use%20your%20feedback%20to%20improve%20documentation.%20While%20we%20are%20reviewing%20your%20feedback,%20we%20may%20send%20you%20e-mail%20to%20ask%20for%20clarification%20or%20feedback%20on%20a%20solution.%20We%20do%20not%20use%20your%20e-mail%20address%20for%20any%20other%20purpose%20and%20we%20delete%20it%20after%20we%20finish%20our%20review.%0\AFor%20further%20information%20about%20the%20privacy%20policies%20of%20Microsoft,%20please%20see%20http://privacy.microsoft.com/it-it/default.aspx.%0\A%0\d','Customer%20Feedback');">commenti e suggerimenti</a> su questo argomento a Microsoft.</span><span id="copyrightarea"><p><a href="9bad553b-9e70-4696-8499-2e35f772a1e0.htm">© 2012 Microsoft. Tutti i diritti sono riservati.</a></p></span></div></div></body></html>